#!/bin/bash
# @author: Giuseppe Ricupero
# @e-mail: giuseppe.ricupero@polito.it
set -e # exit if any command has a non-zero exit status (we avoid tests)
set -u # treat unset variables as an error
# set -x # print each command and resolve variables too before execute it (debug )
set -o pipefail # if any command in a pipeline fails, that return code will be used as the return code of the whole pipeline

script_name="${0##*/}"

# dependencies test
# ------------------
script_deps=(gradle sed grep)
for com in "${script_deps[@]}"; do
	if ! command -v "$com" >/dev/null 2>&1; then
    echo >&2 "'${com}' executable is required to run ${script_name}. Aborting."
    exit 1
  fi
done

usage() {
	echo "${script_name} usage:"
	echo '<*> [-p | --project] <Project Name>'
	echo '    [-h | --help]'
	echo '<*>: mandatory parameter'
}
repeat() {
  printf "${1}%.0s" $(seq 1 "${2}"); echo
}
slog() {
	if [[ 'x-hg' = "x${1}" ]]; then
		shift; TEXT="[${SCRIPT_NAME}] ${*}"
		repeat '=' "${#TEXT}"
		echo "${TEXT}"
		repeat '=' "${#TEXT}"
	else
		echo "[${SCRIPT_NAME}] ${@}"
	fi
}

if [[ $# -lt 2 ]]; then
	usage
	exit 1
fi

# Handle Command line parameters
short='hp:'
long='help,project:'
parsed=$(getopt --options ${short} --longoptions ${long} --name "$0" -- "$@")
if [[ $? != 0 ]]; then
  exit 1
fi
# Add -- at the end of line arguments
eval set -- "${parsed}"

while true; do
	case "$1" in
		-h|--help)
			usage
			exit 5
			;;
		-p|--project)
      project_name="$2"
			shift
			shift
			;;
		--)
			shift
			break
			;;
		*)
			slog "Parameters error"
			exit 1
			;;
	esac
done

workspace="${HOME}/Applicazioni/workspace"
project_dir="${workspace}/${project_name}"
rnd_base_package='it/seatpg/rnd'
main_dir='src/main/groovy'
test_dir='src/test/groovy'
init_class='Library.groovy'
init_test='LibraryTest.groovy'
default_class="${main_dir}/${init_class}"
default_test="${test_dir}/${init_test}"

## 1. Create project dir, if something goes wrong the script stop the execution
mkdir "${project_dir}"
# No need to test because of set -e

## 2. Enter project dir
cd "${project_dir}"
# No need to test because of set -e

## 3. create structure of the project with gradle using spock as test framework
gradle init --type groovy-library &>/dev/null
# No need to test because of set -e

## 4. create the default package for the classes and test creation
for dir in main test; do
  mkdir -p "src/${dir}/groovy/${rnd_base_package}/${project_name}"
done

## 5. add rnd_base_package statement to Library.groovy and LibraryTest.groovy
package_statement="package ${rnd_base_package//\//.}.${project_name}"
sed -i "1i${package_statement}" "${default_class}" "${default_test}"
# unit test 5
if ! grep -q "${package_statement}" "${default_class}"; then
  echo "Adding rnd_package statement to default class failed: exiting..."
  exit 1
fi
if ! grep -q "${package_statement}" "${default_test}"; then
  echo "Adding rnd_package statement to default test failed: exiting..."
  exit 1
fi

## 6. move default class and test to the rnd_base_package
mv "${default_class}" "${main_dir}/${rnd_base_package}/${project_name}"
mv "${default_test}" "${test_dir}/${rnd_base_package}/${project_name}"
# unit test 6
if [[ ! -f "${main_dir}/${rnd_base_package}/${project_name}/${init_class}" ]]
then
  echo "${init_class} not moved to rnd_base_package correctly: exiting..."
  exit 1
fi
if [[ ! -f "${test_dir}/${rnd_base_package}/${project_name}/${init_test}" ]]
then
  echo "${init_test} not moved to rnd_base_package correctly: exiting..."
  exit 1
fi

## 7. add eclipse plugin to build.gradle
eclipse_plugin_statement="apply plugin: 'eclipse'"
gradle_conf='build.gradle'
sed -i "12i${eclipse_plugin_statement}" "${gradle_conf}"
# Unit Test 7
if ! gradle tasks | grep -q 'eclipse'; then
  echo "Apply eclipse plugin to gradle conf file failed: exiting..."
  exit 1
fi

## 8. generate eclipse project files: .classpath, .project, .settings
gradle eclipse &>/dev/null
# unit test 8
for ep_file in classpath project settings; do
  if [[ ! -e ".${ep_file}" ]]; then
    echo "Generating eclipse project files failed: exiting..."
    exit 1
  fi
done

## 9. fix a bug with classpath file generated by gradle init
eclipse_classpath="${project_dir}/.classpath"
sed -i -r 's/(org.eclipse.jdt.launching.JRE_CONTAINER)[^"]+/\1/' "${eclipse_classpath}"
# unit test 9
if grep -q 'StandardVMType' "${eclipse_classpath}"; then
  echo "Fix for eclipse .classpath file not applied correctly: exiting..."
  exit 1
fi
